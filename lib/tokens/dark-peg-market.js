"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DarkPegMarket = exports.Status = void 0;
const ethers_1 = require("ethers");
const abi_1 = require("./abi");
/**
 * STATUS:
 * 0: NO DEPOSIT
 * 1: DEPOSIT LOCKED (NOT SETTLE YET)
 * 2: READY TO SELL
 * 3: EXPIRED
 */
var Status;
(function (Status) {
    Status[Status["NONE"] = 0] = "NONE";
    Status[Status["LOCKED"] = 1] = "LOCKED";
    Status[Status["READY"] = 2] = "READY";
    Status[Status["EXPIRED"] = 3] = "EXPIRED";
})(Status = exports.Status || (exports.Status = {}));
class DarkPegMarket {
    constructor(props) {
        this.contract = new ethers_1.ethers.Contract('0x6a8c2d3c23c1799d4ba7a67e69909fa0a897d1a3', abi_1.darkPegMarketAbi, props.wallet);
        this.walletAddress = props.wallet.getAddress();
    }
    async getActiveAccountAddress() { return this.walletAddress; }
    // READ
    async getUserInfo(token) {
        return this.contract.getUserInfo(token, await this.walletAddress)
            .then((i) => {
            return {
                status: Status[i._status],
                deposited: parseInt(i._deposited.toString()),
            };
        });
    }
    async getTradingInfo(token, amount) {
        return this.contract.getTradingInfo(token, amount)
            .then((i) => {
            return {
                maxAmountIn: parseInt(i._maxAmountIn.toString()),
            };
        });
    }
    // WRITE
    async cancel(token) {
        this.contract.cancel(token);
    }
    async deposit(token, amount) {
        this.contract.deposit(token, amount);
    }
    async sell(token, amount) {
        this.contract.sell(token, amount);
    }
}
exports.DarkPegMarket = DarkPegMarket;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGFyay1wZWctbWFya2V0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiZGFyay1wZWctbWFya2V0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG1DQUFnQztBQUVoQywrQkFBeUM7QUFFekM7Ozs7OztHQU1HO0FBQ0gsSUFBWSxNQUtYO0FBTEQsV0FBWSxNQUFNO0lBQ2hCLG1DQUFJLENBQUE7SUFDSix1Q0FBTSxDQUFBO0lBQ04scUNBQUssQ0FBQTtJQUNMLHlDQUFPLENBQUE7QUFDVCxDQUFDLEVBTFcsTUFBTSxHQUFOLGNBQU0sS0FBTixjQUFNLFFBS2pCO0FBNkJELE1BQWEsYUFBYTtJQUl4QixZQUFZLEtBQXlCO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsSUFBSSxlQUFNLENBQUMsUUFBUSxDQUFDLDRDQUE0QyxFQUFFLHNCQUFnQixFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNsSCxJQUFJLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUM7SUFDakQsQ0FBQztJQUVNLEtBQUssQ0FBQyx1QkFBdUIsS0FBc0IsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQztJQUV0RixPQUFPO0lBQ0EsS0FBSyxDQUFDLFdBQVcsQ0FBQyxLQUFhO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLE1BQU0sSUFBSSxDQUFDLGFBQWEsQ0FBQzthQUM5RCxJQUFJLENBQUMsQ0FBQyxDQUFNLEVBQUUsRUFBRTtZQUNmLE9BQU87Z0JBQ0wsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUN6QixTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDN0MsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLEtBQUssQ0FBQyxjQUFjLENBQUMsS0FBYSxFQUFFLE1BQWM7UUFDdkQsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDO2FBQy9DLElBQUksQ0FBQyxDQUFDLENBQU0sRUFBRSxFQUFFO1lBQ2YsT0FBTztnQkFDTCxXQUFXLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDakQsQ0FBQztRQUNKLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELFFBQVE7SUFDRCxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQWE7UUFDL0IsSUFBSSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDOUIsQ0FBQztJQUVNLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBYSxFQUFFLE1BQWM7UUFDaEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3ZDLENBQUM7SUFFTSxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQWEsRUFBRSxNQUFjO1FBQzdDLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNwQyxDQUFDO0NBQ0Y7QUEzQ0Qsc0NBMkNDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZXRoZXJzIH0gZnJvbSAnZXRoZXJzJztcblxuaW1wb3J0IHsgZGFya1BlZ01hcmtldEFiaSB9IGZyb20gJy4vYWJpJztcblxuLyoqXG4gKiBTVEFUVVM6XG4gKiAwOiBOTyBERVBPU0lUXG4gKiAxOiBERVBPU0lUIExPQ0tFRCAoTk9UIFNFVFRMRSBZRVQpXG4gKiAyOiBSRUFEWSBUTyBTRUxMXG4gKiAzOiBFWFBJUkVEXG4gKi9cbmV4cG9ydCBlbnVtIFN0YXR1cyB7XG4gIE5PTkUsXG4gIExPQ0tFRCxcbiAgUkVBRFksXG4gIEVYUElSRUQsXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVXNlckluZm8ge1xuICBzdGF0dXM6IFN0YXR1cztcbiAgZGVwb3NpdGVkOiBudW1iZXI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhZGluZ0luZm8ge1xuICBtYXhBbW91bnRJbjogbnVtYmVyO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElEYXJrUGVnTWFya2V0IHtcbiAgLy8gUkVBRFxuICBnZXRVc2VySW5mbyh0b2tlbjogc3RyaW5nLCBhY2NvdW50OiBzdHJpbmcpOiBQcm9taXNlPFVzZXJJbmZvPjtcblxuICBnZXRUcmFkaW5nSW5mbyh0b2tlbjogc3RyaW5nLCBhbW91bnQ6IG51bWJlcik6IFByb21pc2U8VHJhZGluZ0luZm8+O1xuXG4gIC8vIFdSSVRFXG4gIGNhbmNlbCh0b2tlbjogc3RyaW5nKTogUHJvbWlzZTx2b2lkPjtcblxuICBkZXBvc2l0KHRva2VuOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPjtcblxuICBzZWxsKHRva2VuOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBEYXJrUGVnTWFya2V0UHJvcHMge1xuICB3YWxsZXQ6IGV0aGVycy5XYWxsZXQ7XG59XG5cbmV4cG9ydCBjbGFzcyBEYXJrUGVnTWFya2V0IGltcGxlbWVudHMgSURhcmtQZWdNYXJrZXQge1xuICBwcml2YXRlIGNvbnRyYWN0OiBldGhlcnMuQ29udHJhY3Q7XG4gIHByaXZhdGUgd2FsbGV0QWRkcmVzczogUHJvbWlzZTxzdHJpbmc+O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBEYXJrUGVnTWFya2V0UHJvcHMpIHtcbiAgICB0aGlzLmNvbnRyYWN0ID0gbmV3IGV0aGVycy5Db250cmFjdCgnMHg2YThjMmQzYzIzYzE3OTlkNGJhN2E2N2U2OTkwOWZhMGE4OTdkMWEzJywgZGFya1BlZ01hcmtldEFiaSwgcHJvcHMud2FsbGV0KTtcbiAgICB0aGlzLndhbGxldEFkZHJlc3MgPSBwcm9wcy53YWxsZXQuZ2V0QWRkcmVzcygpO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldEFjdGl2ZUFjY291bnRBZGRyZXNzKCk6IFByb21pc2U8c3RyaW5nPiB7IHJldHVybiB0aGlzLndhbGxldEFkZHJlc3M7IH1cblxuICAvLyBSRUFEXG4gIHB1YmxpYyBhc3luYyBnZXRVc2VySW5mbyh0b2tlbjogc3RyaW5nKTogUHJvbWlzZTxVc2VySW5mbz4ge1xuICAgIHJldHVybiB0aGlzLmNvbnRyYWN0LmdldFVzZXJJbmZvKHRva2VuLCBhd2FpdCB0aGlzLndhbGxldEFkZHJlc3MpXG4gICAgICAudGhlbigoaTogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgc3RhdHVzOiBTdGF0dXNbaS5fc3RhdHVzXSxcbiAgICAgICAgICBkZXBvc2l0ZWQ6IHBhcnNlSW50KGkuX2RlcG9zaXRlZC50b1N0cmluZygpKSxcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICB9XG5cbiAgcHVibGljIGFzeW5jIGdldFRyYWRpbmdJbmZvKHRva2VuOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyKTogUHJvbWlzZTxUcmFkaW5nSW5mbz4ge1xuICAgIHJldHVybiB0aGlzLmNvbnRyYWN0LmdldFRyYWRpbmdJbmZvKHRva2VuLCBhbW91bnQpXG4gICAgICAudGhlbigoaTogYW55KSA9PiB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgbWF4QW1vdW50SW46IHBhcnNlSW50KGkuX21heEFtb3VudEluLnRvU3RyaW5nKCkpLFxuICAgICAgICB9O1xuICAgICAgfSk7XG4gIH1cblxuICAvLyBXUklURVxuICBwdWJsaWMgYXN5bmMgY2FuY2VsKHRva2VuOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0aGlzLmNvbnRyYWN0LmNhbmNlbCh0b2tlbik7XG4gIH1cblxuICBwdWJsaWMgYXN5bmMgZGVwb3NpdCh0b2tlbjogc3RyaW5nLCBhbW91bnQ6IG51bWJlcik6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuY29udHJhY3QuZGVwb3NpdCh0b2tlbiwgYW1vdW50KTtcbiAgfVxuXG4gIHB1YmxpYyBhc3luYyBzZWxsKHRva2VuOiBzdHJpbmcsIGFtb3VudDogbnVtYmVyKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdGhpcy5jb250cmFjdC5zZWxsKHRva2VuLCBhbW91bnQpO1xuICB9XG59Il19